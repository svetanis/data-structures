package com.svetanis.datastructures.graph.unionfind;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

// 924. Minimize Malware Spread

public final class MinimizeMalwareSpread {
	// Time Complexity: O(n^2)
	// Space Complexity: O(n + k)

	private int[] size;
	private int[] parent;

	public int mms(int[][] g, int[] initial) {
		init(g.length);
		union(g);
		Arrays.sort(initial);
		return minInfectedCount(initial);
	}

	private int minInfectedCount(int[] initial) {
		int n = initial.length;
		int min = Integer.MAX_VALUE;
		int node = initial[0];
		for (int i = 0; i < n; i++) {
			int count = 0;
			Set<Integer> set = new HashSet<>();
			for (int j = 0; j < n; j++) {
				if (i == j) {
					continue;
				}
				int root = find(initial[j]);
				if (set.contains(root)) {
					continue;
				}
				set.add(root);
				count += size[root];
			}
			if (min > count) {
				min = count;
				node = initial[i];
			}
		}
		return node;
	}

	private void init(int n) {
		this.parent = new int[n];
		for (int i = 0; i < n; i++) {
			this.parent[i] = i;
		}
		this.size = new int[n];
		Arrays.fill(this.size, 1);
	}

	private void union(int[][] g) {
		int n = g.length;
		for (int i = 0; i < n; i++) {
			for (int j = i + 1; j < n; j++) {
				if (g[i][j] == 1) {
					int px = find(i);
					int py = find(j);
					if (px != py) {
						parent[px] = py;
						size[py] += size[px];
					}
				}
			}
		}
	}

	private int find(int x) {
		if (parent[x] != x) {
			parent[x] = find(parent[x]);
		}
		return parent[x];
	}

	public static void main(String[] args) {
		MinimizeMalwareSpread mli = new MinimizeMalwareSpread();
		int[][] g1 = { { 1, 1, 0 }, { 1, 1, 0 }, { 0, 0, 1 } };
		int[] initial1 = { 0, 1 };
		System.out.println(mli.mms(g1, initial1)); // 0

		int[][] g2 = { { 1, 0, 0 }, { 0, 1, 0 }, { 0, 0, 1 } };
		int[] initial2 = { 0, 2 };
		System.out.println(mli.mms(g2, initial2)); // 0

		int[][] g3 = { { 1, 1, 1 }, { 1, 1, 1 }, { 1, 1, 1 } };
		int[] initial3 = { 1, 2 };
		System.out.println(mli.mms(g3, initial3)); // 1
	}
}
